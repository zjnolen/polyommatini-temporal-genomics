---
title: "Genetic load"
format:
  html:
    code-fold: true
---

The third figure focuses on genetic load, especially in relation to inbreeding
in *Cy. semiargus*. We measure genetic load using two methods, one using highly
conserved regions determined from conservation scores (GERP), the other using
genome annotations to infer putative impact classes for each variant.

```{r}
#| label: load-packages

library(ggplot2) # For general plotting
library(data.table) # For reading in data tables without reading in all columns
library(dplyr) # For manipulating dataframes
library(tidyr) # For splitting data frame columns
library(stringr) # For subsetting metadata strings
library(ggtext) # For markdown syntax in ggplot
library(ggpubr) # For t.test results within plots
library(scales) # For muted colors
library(ggh4x) # For nested ggplot facets
library(cowplot) # For arranging plots

species <- c("picarus", "pargus", "csemiargus")
genomes <- c("ilPolIcar1.1", "ilPleArgu1.3", "ilCyaSemi1.1")
```

## Mutational load from conservation scores

GERP scores give a measure of how conserverved a position is across a lineage,
and can be used to determine what sites might be under the highest evolutionary
constraint. For positions where we can estimate GERP scores and infer an
ancestral state using alignments from many other species, we select the top 1%
of GERP scores out of all genomic positions, and calculate an estimate of
relative mutational load from that. In this case, relative mutational load is
estimated per individual as the derived allele count at each position multiplied
by its GERP score, summed across the genome and divided by the total derived
allele count (which we will present as a value per 1000 derived alleles for
readability).

Here, it is done per individual by summing the product of derived allele counts
at each position with their GERP score, then dividing the sum by the total
derived allele count for an individual.

```{r}
#| label: fig-gerp
#| fig-height: 3
#| fig-width: 7

gerp_all <- c()

for (i in c(1:length(species))) {
  s <- species[i]
  g <- genomes[i]
  gerp <- fread(
    paste0(
      "../angsd/results/datasets/historical-",
      s,
      "-notrans/analyses/gerp/historical-",
      s,
      "-notrans.",
      g,
      "_all.dp5_allsites-filts.filtered_mindp4-biallelic.notrans.fmiss0.2.relative-load-gerp.csv"
    ),
    header = TRUE,
    sep = "\t",
    select = c("sample", "population", "time", "depth", "relload", "relload_hom", "nsnps")
  )
  gerp$species <- s

  froh <- fread(
    paste0(
      "../angsd/results/datasets/historical-",
      s,
      "-notrans/plots/inbreeding/historical-",
      s,
      "-notrans.",
      g,
      "_all.dp5_allsites-filts.filtered_mindp4-biallelic.notrans.fmiss0.2.bcftools.ind_froh.tsv"
    ),
    header = TRUE,
    sep = "\t",
    select = c("sample", "population", "time", "depth", "Froh")
  )

  gerp <- merge(gerp, froh, by = c("sample", "population", "time", "depth"))

  gerp_all <- rbind(gerp_all, gerp)
}

gerp_all$year <- str_sub(gerp_all$population, -4, -1)
gerp_all$region <- str_sub(gerp_all$population, 1, -5)

gerp_all$species <- factor(
  gerp_all$species,
  levels = species,
  labels = c("Po. icarus", "Pl. argus", "Cy. semiargus")
)

gerp_all$time <- factor(
  gerp_all$time,
  levels = c("historical", "modern"),
  labels = c("Historical", "Modern")
)

gerp_all$region <- factor(
  gerp_all$region,
  levels = c("WSkane", "SWSkane", "ESkane", "SESkane", "NSmaland", "Oland"),
  labels = c(
    "W Skåne", "SW Skåne", "E Skåne", "SE Skåne", "Småland", "Öland"
  )
)

gerp <- ggplot(gerp_all, aes(x = time, y = relload * 1000)) +
  facet_grid(cols = vars(species)) +
  geom_boxplot(outliers = FALSE) +
  geom_point(
    aes(color = Froh, group = region),
    position = position_jitterdodge(jitter.width = 0.05)
  ) +
  scale_color_gradient(high = "#6e016b", low = "#9ebcda") +
  ylab("Conserved Regions") +
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.20))) +
  geom_pwc(hide.ns = TRUE, label = "p.signif", method = "t.test") +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    strip.text.x = element_text(size = 10, face = "italic")
  )

gerp_hom <- ggplot(gerp_all, aes(x = time, y = relload_hom * 1000)) +
  facet_grid(cols = vars(species)) +
  geom_boxplot(outliers = FALSE) +
  geom_point(
    aes(color = Froh, group = region),
    position = position_jitterdodge(jitter.width = 0.05)
  ) +
  scale_color_gradient(high = "#6e016b", low = "#9ebcda") +
  ylab("Conserved Regions") +
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.20))) +
  geom_pwc(hide.ns = TRUE, label = "p.signif", method = "t.test") +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    strip.text.x = element_text(size = 10, face = "italic")
  )

# Output table of statistical tests

gerp_all$time <- factor(gerp_all$time, levels = c("Modern", "Historical"))

gerp_stats <- gerp_all %>%
  group_by(species) %>%
  summarise(
    method = t.test(relload * 1000 ~ time)$method,
    meandiff = t.test(relload * 1000 ~ time)$estimate[1] - t.test(relload * 1000 ~ time)$estimate[2],
    conf.low = t.test(relload * 1000 ~ time)$conf.int[1],
    conf.hi = t.test(relload * 1000 ~ time)$conf.int[2],
    stat = t.test(relload * 1000 ~ time)$statistic,
    p.value = t.test(relload * 1000 ~ time)$p.value,
    meandiff_rel = t.test(relload_hom * 1000 ~ time)$estimate[1] - t.test(relload_hom * 1000 ~ time)$estimate[2],
    conf.low_rel = t.test(relload_hom * 1000 ~ time)$conf.int[1],
    conf.hi_rel = t.test(relload_hom * 1000 ~ time)$conf.int[2],
    stat_rel = t.test(relload_hom * 1000 ~ time)$statistic,
    p.value_rel = t.test(relload_hom * 1000 ~ time)$p.value
  )

gerp_stats$variants <- "gerp"

gerp

gerp_hom
```

## Mutational load from coding regions

VEP annotates the effects alternate variants will have based on the genome
annotation. Annotations have "high", "moderate", "low", and "modifier" impacts
that relate roughly to loss of function/frame shift, non-synonymous change,
synonymous change, and other changes (intergenic/downstream of a gene),
respectively. We visualize load this way by examining the change in frequency
of the alternate allele in the time categories, as well as by comparing counts
of the alternate allele, treating the alternate as putatively deleterious.

```{r}
#| label: fig-vepload

varcounts_all <- c()

for (i in c(1:length(species))) {
  s <- species[i]
  g <- genomes[i]

  # Read in variant impact counts
  varcounts <- read.table(
    paste0(
      "../angsd/results/datasets/historical-",
      s,
      "-notrans/analyses/vep/historical-",
      s,
      "-notrans.",
      g,
      "_all.dp5_allsites-filts.filtered_mindp4-biallelic.notrans.fmiss0.2.varimpacts.tsv"
    ),
    header = TRUE
  )

  froh <- fread(
    paste0(
      "../angsd/results/datasets/historical-",
      s,
      "-notrans/plots/inbreeding/historical-",
      s,
      "-notrans.",
      g,
      "_all.dp5_allsites-filts.filtered_mindp4-biallelic.notrans.fmiss0.2.bcftools.ind_froh.tsv"
    ),
    header = TRUE,
    sep = "\t",
    select = c("sample", "population", "time", "depth", "Froh")
  )

  varcounts <- merge(varcounts, froh, by = c("sample", "population", "time", "depth"))

  varcounts$species <- s
  varcounts_all <- rbind(varcounts_all, varcounts)
}

varcounts_all$year <- str_sub(varcounts_all$population, -4, -1)
varcounts_all$region <- str_sub(varcounts_all$population, 1, -5)

varcounts_all$species <- factor(
  varcounts_all$species,
  levels = species,
  labels = c("Po. icarus", "Pl. argus", "Cy. semiargus")
)

varcounts_all$time <- factor(
  varcounts_all$time,
  levels = c("historical", "modern"),
  labels = c("Historical", "Modern")
)

varcounts_all$region <- factor(
  varcounts_all$region,
  levels = c("WSkane", "SWSkane", "ESkane", "SESkane", "NSmaland", "Oland"),
  labels = c(
    "W Skåne", "SW Skåne", "E Skåne", "SE Skåne", "Småland", "Öland"
  )
)

high <- ggplot(varcounts_all, aes(x = time, y = high * 1000 / alts)) +
  facet_grid(cols = vars(species)) +
  geom_boxplot(outliers = FALSE) +
  geom_point(
    aes(color = Froh, group = region),
    position = position_jitterdodge(jitter.width = 0.05)
  ) +
  scale_color_gradient(high = "#6e016b", low = "#9ebcda") +
  ylab("High Impact") +
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.20))) +
  geom_pwc(hide.ns = TRUE, label = "p.signif", method = "t.test") +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    strip.text.x = element_text(size = 10, face = "italic")
  )

high_hom <- ggplot(varcounts_all, aes(x = time, y = high_hom * 1000 / alts)) +
  facet_grid(cols = vars(species)) +
  geom_boxplot(outliers = FALSE) +
  geom_point(
    aes(color = Froh, group = region),
    position = position_jitterdodge(jitter.width = 0.05)
  ) +
  scale_color_gradient(high = "#6e016b", low = "#9ebcda") +
  ylab("High Impact") +
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.20))) +
  geom_pwc(hide.ns = TRUE, label = "p.signif", method = "t.test") +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    strip.text.x = element_text(size = 10, face = "italic")
  )

mod <- ggplot(varcounts_all, aes(x = time, y = mod * 1000 / alts)) +
  facet_grid(cols = vars(species)) +
  geom_boxplot(outliers = FALSE) +
  geom_point(
    aes(color = Froh, group = region),
    position = position_jitterdodge(jitter.width = 0.05)
  ) +
  scale_color_gradient(high = "#6e016b", low = "#9ebcda") +
  ylab("Moderate Impact") +
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.20))) +
  geom_pwc(hide.ns = TRUE, label = "p.signif", method = "t.test") +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    strip.text.x = element_text(size = 10, face = "italic")
  )

mod_hom <- ggplot(varcounts_all, aes(x = time, y = mod_hom * 1000 / alts)) +
  facet_grid(cols = vars(species)) +
  geom_boxplot(outliers = FALSE) +
  geom_point(
    aes(color = Froh, group = region),
    position = position_jitterdodge(jitter.width = 0.05)
  ) +
  scale_color_gradient(high = "#6e016b", low = "#9ebcda") +
  ylab("Moderate Impact") +
  scale_y_continuous(expand = expansion(mult = c(0.05, 0.20))) +
  geom_pwc(hide.ns = TRUE, label = "p.signif", method = "t.test") +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    strip.text.x = element_text(size = 10, face = "italic")
  )

# Output table of statistical tests

varcounts_all$time <- factor(varcounts_all$time, levels = c("Modern", "Historical"))

mod_stats <- varcounts_all %>%
  group_by(species) %>%
  summarise(
    method = t.test(mod * 1000 / alts ~ time)$method,
    meandiff = t.test(mod * 1000 / alts ~ time)$estimate[1] - t.test(mod * 1000 / alts ~ time)$estimate[2],
    conf.low = t.test(mod * 1000 / alts ~ time)$conf.int[1],
    conf.hi = t.test(mod * 1000 / alts ~ time)$conf.int[2],
    stat = t.test(mod * 1000 / alts ~ time)$statistic,
    p.value = t.test(mod * 1000 / alts ~ time)$p.value,
    meandiff_rel = t.test(mod_hom * 1000 / alts ~ time)$estimate[1] - t.test(mod_hom * 1000 / alts ~ time)$estimate[2],
    conf.low_rel = t.test(mod_hom * 1000 / alts ~ time)$conf.int[1],
    conf.hi_rel = t.test(mod_hom * 1000 / alts ~ time)$conf.int[2],
    stat_rel = t.test(mod_hom * 1000 / alts ~ time)$statistic,
    p.value_rel = t.test(mod_hom * 1000 / alts ~ time)$p.value
  )

high_stats <- varcounts_all %>%
  group_by(species) %>%
  summarise(
    method = t.test(high * 1000 / alts ~ time)$method,
    meandiff = t.test(high * 1000 / alts ~ time)$estimate[1] - t.test(high * 1000 / alts ~ time)$estimate[2],
    conf.low = t.test(high * 1000 / alts ~ time)$conf.int[1],
    conf.hi = t.test(high * 1000 / alts ~ time)$conf.int[2],
    stat = t.test(high * 1000 / alts ~ time)$statistic,
    p.value = t.test(high * 1000 / alts ~ time)$p.value,
    meandiff_rel = t.test(high_hom * 1000 / alts ~ time)$estimate[1] - t.test(high_hom * 1000 / alts ~ time)$estimate[2],
    conf.low_rel = t.test(high_hom * 1000 / alts ~ time)$conf.int[1],
    conf.hi_rel = t.test(high_hom * 1000 / alts ~ time)$conf.int[2],
    stat_rel = t.test(high_hom * 1000 / alts ~ time)$statistic,
    p.value_rel = t.test(high_hom * 1000 / alts ~ time)$p.value
  )

mod_stats$variants <- "mod"
high_stats$variants <- "high"

load_stats <- rbind(gerp_stats, mod_stats, high_stats)
write.table(load_stats,
  file = "../tables/load_stats.tsv", quote = FALSE,
  sep = "\t", row.names = FALSE
)
```

We will also generate a plot to illustrate how long runs of homozygosity are per
individual in *C. semiargus*.
```{r}
#| label: fig-csemiargus-roh

rohs <- read.table("../angsd/results/datasets/historical-csemiargus-notrans/analyses/roh/bcftools/historical-csemiargus-notrans.ilCyaSemi1.1_all.dp5_allsites-filts.filtered_mindp4-biallelic.notrans.fmiss0.2.regs.roh")

colnames(rohs) <- c(
  "type", "sample", "chr", "start", "end", "length",
  "inform_sites", "phred"
)

rohs <- rohs[rohs$length >= 100000 & rohs$phred >= 85, ]

nroh <- rohs %>%
  group_by(sample) %>%
  summarise(cumroh = sum(length), nroh = n())

inds <- read.table(
  "../angsd/results/datasets/historical-csemiargus-notrans/poplists/historical-csemiargus-notrans_all.indiv.list",
  header = TRUE
)

inds <- inds[inds$sample != "MZLU152765", ]

nroh <- merge(inds, nroh, by = "sample", all = TRUE)
nroh[is.na(nroh)] <- 0

norun <- c()
norun$type <- rep("RG", nrow(inds))
norun$sample <- inds$sample
norun$chr <- rep(0, nrow(inds))
norun$start <- rep(0, nrow(inds))
norun$end <- rep(0, nrow(inds))
norun$length <- rep(0, nrow(inds))
norun$inform_sites <- rep(0, nrow(inds))
norun$phred <- rep(0, nrow(inds))
norun <- data.frame(norun)

autosize <- 416794061

bins <- c(Inf, 6000000, 3000000, 1500000, 500000, 100000)

frohs <- c()
ranges <- c()

for (i in seq(length(bins))) {
  if (i <= length(bins) - 1) {
    runs <- rohs[rohs$length < bins[i], ]
    runs <- runs[runs$length >= bins[i + 1], ]
    runs <- rbind(runs, norun)
    runs <- runs %>%
      group_by(sample) %>%
      summarize(length = sum(length))
    runs <- merge(runs, inds, by = "sample")
    runs$froh <- runs$length / autosize
    runs$range <- paste0(bins[i], "-", bins[i + 1])
    ranges <- c(ranges, paste0(bins[i], "-", bins[i + 1]))
    frohs <- rbind(frohs, runs)
  }
}

range_labels <- rev(c("0.1-0.5", "0.5-1.5", "1.5-3", "3-6", ">6"))
frohs$range <- as.factor(frohs$range)
frohs$range <- factor(frohs$range, levels = ranges, labels = range_labels)

indfroh <- frohs %>%
  group_by(sample) %>%
  summarize(froh = sum(froh))

frohs$sample <- factor(frohs$sample, levels = indfroh$sample[order(indfroh$froh)])

popord <- c(
  "WSkane1951", "ESkane1956", "NSmaland1936", "WSkane2021", "ESkane2021",
  "SESkane2022", "NSmaland2021"
)

poplab <- c(
  "W Skåne\n1951", "E Skåne\n1956", "Småland\n1936", "W Skåne\n2021",
  "E Skåne\n2021", "SE Skåne\n2022", "Småland\n2021"
)

frohs$population <- factor(frohs$population, levels = popord, labels = poplab)
frohs$time <- factor(frohs$time,
  levels = c("historical", "modern"),
  labels = c("Historical", "Modern")
)

frohplot <- ggplot(
  data = frohs, aes(x = sample, y = froh, alpha = range), fill = "black"
) +
  geom_bar(position = "stack", stat = "identity") +
  facet_nested(~ time + population,
    scales = "free_x", space = "free",
    nest_line = TRUE
  ) +
  theme_bw() +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 0.35)) +
  scale_alpha_discrete(range = c(1, 0.4)) +
  labs(y = "*F~RoH~* (*Cy. semiargus*)", alpha = "*RoH* size (Mb)") +
  theme(
    legend.position = "bottom",
    strip.background = element_blank(),
    axis.text.x = element_blank(),
    axis.title.y = element_markdown(),
    legend.title = element_markdown(),
    axis.title.x = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
  )

nroh <- nroh[nroh$time == "modern", ]

popmeans <- nroh %>%
  group_by(population) %>%
  summarize(
    nroh = mean(nroh),
    cumroh = mean(cumroh)
  )


ggplot(nroh, aes(x = cumroh, y = nroh)) +
  geom_point(aes(
    color = population,
    shape = population
  ), alpha = 0.6) +
  geom_point(
    data = popmeans,
    aes(x = cumroh, y = nroh, size = 3, color = population, shape = population)
  ) +
  scale_color_manual(
    values = c("#658399", "#8A2A3B", "#658399", "#244F6E")
  ) +
  scale_shape_manual(
    values = c(15:18)
  ) +
  guides(size = "none") +
  ylab("Total RoH Count") +
  xlab("Cumulative length of RoHs (bp)") +
  theme_classic() +
  theme(
    aspect.ratio = 1
  )

ggsave("../figures/suppfig-nrohs.png", dpi = 600, create.dir = TRUE)
```

Then combine this inbreeding coefficient figure of *C. semiargus* with the
figures depicting genetic load.
```{r}
#| label: fig-load
#| fig-height: 8
#| fig-width: 8

gerp_clean <- gerp +
  ggtitle("Total Genetic Load") +
  theme(
    plot.margin = unit(c(5.5, 5.5, 3, 5.5), "pt"),
    legend.position = "none",
    axis.title.y = element_text(size = 10),
    axis.text.x = element_blank(),
    strip.background = element_blank()
  )

high_clean <- high +
  theme(
    plot.margin = unit(c(3, 5.5, 3, 5.5), "pt"),
    legend.position = "none",
    strip = element_blank(),
    axis.title.y = element_text(size = 10),
    axis.text.x = element_blank(),
    strip.text.x = element_blank(),
    strip.background = element_blank()
  )

mod_clean <- mod +
  theme(
    plot.margin = unit(c(3, 5.5, 5.5, 5.5), "pt"),
    legend.position = "none",
    strip = element_blank(),
    axis.title.y = element_text(size = 10),
    strip.text.x = element_blank(),
    strip.background = element_blank()
  )

gerp_hom_clean <- gerp_hom +
  ggtitle("Realized Genetic Load") +
  theme(
    plot.margin = unit(c(5.5, 5.5, 3, 5.5), "pt"),
    legend.position = "none",
    axis.title.y = element_text(size = 10),
    axis.text.x = element_blank(),
    strip.background = element_blank()
  )

high_hom_clean <- high_hom +
  theme(
    plot.margin = unit(c(3, 5.5, 3, 5.5), "pt"),
    legend.position = "none",
    strip = element_blank(),
    axis.title.y = element_text(size = 10),
    axis.text.x = element_blank(),
    strip.text.x = element_blank(),
    strip.background = element_blank()
  )

mod_hom_clean <- mod_hom +
  theme(
    plot.margin = unit(c(3, 5.5, 5.5, 5.5), "pt"),
    legend.position = "none",
    strip = element_blank(),
    axis.title.y = element_text(size = 10),
    strip.text.x = element_blank(),
    strip.background = element_blank()
  )

total_load <- plot_grid(
  gerp_clean,
  high_clean,
  mod_clean,
  rel_heights = c(1.2, 0.9, 1),
  ncol = 1,
  align = "v"
)

real_load <- plot_grid(
  gerp_hom_clean,
  high_hom_clean,
  mod_hom_clean,
  rel_heights = c(1.2, 0.9, 1),
  ncol = 1,
  align = "v"
)

load <- plot_grid(total_load, real_load, ncol = 2, labels = c("B", "C"))

legend_inb <- get_plot_component(
  gerp +
    labs(color = "*F~RoH~*") +
    theme(
      legend.position = "bottom",
      legend.title = element_markdown(),
      legend.key.width = unit(2, "cm")
    ),
  "guide-box",
  return_all = TRUE
)[[3]]

plot_grid(frohplot, load, legend_inb,
  ncol = 1,
  rel_heights = c(0.4, 0.7, 0.1),
  labels = c("A", "", "")
) + bgcolor("white")

ggsave("../figures/fig-load.png", dpi = 600, create.dir = TRUE)
```

Finally, for the supplement, we can illustrate how realized load, but not total
load is correlated with inbreeding coefficient using a linear model.

```{r}
#| label: fig-inbrload
#| fig-width: 8
#| fig-height: 3

gerp_csemi <- gerp_all[gerp_all$species == "Cy. semiargus" & gerp_all$time == "Modern", ]
var_csemi <- varcounts_all[varcounts_all$species == "Cy. semiargus" & varcounts_all$time == "Modern", ]

gerpreg <- ggplot(gerp_csemi, aes(x = Froh, y = relload)) +
  ggtitle("Conserved Regions") +
  geom_point(color = "red") +
  geom_point(aes(y = relload_hom), color = "blue") +
  geom_smooth(method = "lm", color = "red") +
  geom_smooth(aes(y = relload_hom), method = "lm", color = "blue") +
  ylab("Genetic Load") +
  xlab("Inbreeding Coefficient (*F~RoH~*)") +
  stat_cor(color = "red", label.y = 0.4) +
  stat_cor(aes(y = relload_hom), color = "blue", label.y = 0.33) +
  theme_classic() +
  theme(
    axis.title.x = element_markdown(),
    legend.position = "none"
  )

highreg <- ggplot(var_csemi, aes(x = Froh, y = high / alts)) +
  ggtitle("High Impact") +
  geom_point(color = "red") +
  geom_point(aes(y = high_hom / alts), color = "blue") +
  geom_smooth(method = "lm", color = "red") +
  geom_smooth(aes(y = high_hom / alts), method = "lm", color = "blue") +
  ylab("Genetic Load") +
  xlab("Inbreeding Coefficient (*F~RoH~*)") +
  stat_cor(color = "red", label.y = 0.0011) +
  stat_cor(aes(y = high_hom / alts), label.y = 0, color = "blue") +
  theme_classic() +
  theme(
    axis.title.x = element_markdown(),
    legend.position = "none"
  )

modreg <- ggplot(var_csemi, aes(x = Froh, y = mod / alts)) +
  ggtitle("Moderate Impact") +
  geom_point(color = "red") +
  geom_point(aes(y = mod_hom / alts), color = "blue") +
  geom_smooth(method = "lm", color = "red") +
  geom_smooth(aes(y = mod_hom / alts), method = "lm", color = "blue") +
  ylab("Genetic Load") +
  xlab("Inbreeding Coefficient (*F~RoH~*)") +
  stat_cor(color = "red", label.y = 0.05) +
  stat_cor(aes(y = mod_hom / alts), label.y = 0, color = "blue") +
  theme_classic() +
  theme(
    axis.title.x = element_markdown(),
    legend.position = "none"
  )

plot_grid(gerpreg, highreg, modreg, ncol = 3)
ggsave("../figures/suppfig-inbreg.png", dpi = 600, create.dir = TRUE)
```